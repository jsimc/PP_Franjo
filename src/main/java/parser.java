
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\004\000\002\002\005\000\002\002\006\000" +
    "\002\002\006\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\004\014\000\002\004\011\000\002\004" +
    "\014\000\002\004\011\000\002\004\010\000\002\004\013" +
    "\000\002\004\010\000\002\013\005\000\002\013\003\000" +
    "\002\016\007\000\002\016\005\000\002\016\003\000\002" +
    "\015\005\000\002\015\003\000\002\020\005\000\002\014" +
    "\005\000\002\014\003\000\002\017\007\000\002\017\003" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\003\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\003\000\002\032\012\000\002\032\005\000\002" +
    "\032\012\000\002\027\003\000\002\027\003\000\002\007" +
    "\004\000\002\007\003\000\002\010\010\000\002\010\005" +
    "\000\002\005\016\000\002\005\016\000\002\005\016\000" +
    "\002\005\016\000\002\005\010\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\031\004\000\002\031\004\000" +
    "\002\033\007\000\002\011\004\000\002\011\003\000\002" +
    "\012\010\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\004\006\005\005\001\002\000\004\002" +
    "\241\001\002\000\004\014\010\001\002\000\006\005\011" +
    "\014\010\001\002\000\010\002\ufffc\003\232\005\233\001" +
    "\002\000\004\014\016\001\002\000\004\003\015\001\002" +
    "\000\012\002\ufff7\003\ufff7\004\ufff7\005\ufff7\001\002\000" +
    "\014\002\ufff5\003\ufff5\004\ufff5\005\ufff5\014\010\001\002" +
    "\000\012\002\ufff6\003\ufff6\004\ufff6\005\ufff6\001\002\000" +
    "\004\002\ufffa\001\002\000\006\006\020\014\017\001\002" +
    "\000\006\006\177\012\176\001\002\000\004\015\021\001" +
    "\002\000\006\012\023\022\022\001\002\000\012\012\043" +
    "\013\050\014\030\020\031\001\002\000\004\016\172\001" +
    "\002\000\010\015\uffe7\017\uffe7\022\170\001\002\000\004" +
    "\015\026\001\002\000\004\022\027\001\002\000\012\012" +
    "\043\013\050\014\030\020\031\001\002\000\010\011\144" +
    "\012\061\014\167\001\002\000\012\012\043\013\050\014" +
    "\060\020\031\001\002\000\034\002\uffdc\003\uffdc\004\uffdc" +
    "\005\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\030" +
    "\uffdc\031\uffdc\037\151\040\147\001\002\000\046\002\uffd1" +
    "\003\uffd1\004\uffd1\005\uffd1\015\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\037\uffd1\040\uffd1\001\002\000\004\015" +
    "\162\001\002\000\004\014\142\001\002\000\050\002\uffca" +
    "\003\uffca\004\uffca\005\uffca\014\060\015\uffca\016\uffca\017" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\037\uffca\040\uffca\001\002\000" +
    "\034\002\uffe0\003\uffe0\004\uffe0\005\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\030\uffe0\031\106\037\uffe0\040" +
    "\uffe0\001\002\000\024\002\uffb5\003\uffb5\004\uffb5\005\uffb5" +
    "\012\uffb5\013\uffb5\014\115\015\uffb5\020\uffb5\001\002\000" +
    "\016\002\uffbd\003\uffbd\004\uffbd\005\uffbd\015\uffbd\030\075" +
    "\001\002\000\046\002\uffd9\003\uffd9\004\uffd9\005\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\053\024\055" +
    "\025\054\026\056\027\052\030\uffd9\031\uffd9\037\uffd9\040" +
    "\uffd9\001\002\000\046\002\uffd4\003\uffd4\004\uffd4\005\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\037\uffd4" +
    "\040\uffd4\001\002\000\046\002\uffd5\003\uffd5\004\uffd5\005" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\037" +
    "\uffd5\040\uffd5\001\002\000\014\002\uffbc\003\uffbc\004\uffbc" +
    "\005\uffbc\015\uffbc\001\002\000\024\002\uffba\003\uffba\004" +
    "\uffba\005\uffba\012\043\013\050\014\030\015\uffba\020\031" +
    "\001\002\000\034\002\uffde\003\uffde\004\uffde\005\uffde\015" +
    "\uffde\016\uffde\017\uffde\021\uffde\022\uffde\030\uffde\031\uffde" +
    "\037\uffde\040\uffde\001\002\000\046\002\uffd3\003\uffd3\004" +
    "\uffd3\005\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\001\002\000\014\002\uffbb\003\uffbb" +
    "\004\uffbb\005\uffbb\015\uffbb\001\002\000\012\012\043\013" +
    "\050\014\060\020\031\001\002\000\012\012\043\013\050" +
    "\014\060\020\031\001\002\000\012\012\043\013\050\014" +
    "\060\020\031\001\002\000\012\012\043\013\050\014\060" +
    "\020\031\001\002\000\012\012\043\013\050\014\060\020" +
    "\031\001\002\000\046\002\uffd7\003\uffd7\004\uffd7\005\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\037\uffd7" +
    "\040\uffd7\001\002\000\006\012\061\014\062\001\002\000" +
    "\004\015\110\001\002\000\004\012\063\001\002\000\004" +
    "\015\064\001\002\000\004\012\065\001\002\000\010\015" +
    "\uffe2\016\073\022\uffe2\001\002\000\006\015\uffe4\022\071" +
    "\001\002\000\004\015\070\001\002\000\050\002\uffc9\003" +
    "\uffc9\004\uffc9\005\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\037\uffc9\040\uffc9\001\002\000\004" +
    "\012\065\001\002\000\004\015\uffe5\001\002\000\012\012" +
    "\043\013\050\014\060\020\031\001\002\000\006\016\076" +
    "\030\075\001\002\000\012\012\043\013\050\014\060\020" +
    "\031\001\002\000\014\032\104\033\103\034\101\035\102" +
    "\036\100\001\002\000\006\015\uffe3\022\uffe3\001\002\000" +
    "\010\015\uffbe\017\uffbe\022\uffbe\001\002\000\010\015\uffc0" +
    "\017\uffc0\022\uffc0\001\002\000\010\015\uffbf\017\uffbf\022" +
    "\uffbf\001\002\000\010\015\uffc2\017\uffc2\022\uffc2\001\002" +
    "\000\010\015\uffc1\017\uffc1\022\uffc1\001\002\000\034\002" +
    "\uffe1\003\uffe1\004\uffe1\005\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\030\uffe1\031\106\037\uffe1\040\uffe1\001" +
    "\002\000\012\012\043\013\050\014\060\020\031\001\002" +
    "\000\034\002\uffdf\003\uffdf\004\uffdf\005\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\030\uffdf\031\uffdf\037\uffdf" +
    "\040\uffdf\001\002\000\050\002\uffc8\003\uffc8\004\uffc8\005" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\037\uffc8\040\uffc8\001\002\000\034\002\uffda\003\uffda" +
    "\004\uffda\005\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022" +
    "\uffda\030\uffda\031\uffda\037\uffda\040\uffda\001\002\000\046" +
    "\002\uffd8\003\uffd8\004\uffd8\005\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\037\uffd8\040\uffd8\001\002\000" +
    "\034\002\uffdb\003\uffdb\004\uffdb\005\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\030\uffdb\031\uffdb\037\uffdb\040" +
    "\uffdb\001\002\000\046\002\uffd6\003\uffd6\004\uffd6\005\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6" +
    "\040\uffd6\001\002\000\004\014\117\001\002\000\024\002" +
    "\uffb6\003\uffb6\004\uffb6\005\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\020\uffb6\001\002\000\004\007\120\001\002\000" +
    "\006\003\121\015\122\001\002\000\024\002\uffb3\003\uffb3" +
    "\004\uffb3\005\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\020" +
    "\uffb3\001\002\000\004\012\124\001\002\000\004\015\136" +
    "\001\002\000\004\016\131\001\002\000\006\015\uffe9\022" +
    "\uffe9\001\002\000\006\015\uffec\022\127\001\002\000\004" +
    "\012\124\001\002\000\004\015\uffed\001\002\000\024\012" +
    "\043\013\050\014\060\020\031\032\104\033\103\034\101" +
    "\035\102\036\100\001\002\000\010\015\uffe6\017\uffe6\022" +
    "\uffe6\001\002\000\012\015\uffea\016\134\022\uffea\030\075" +
    "\001\002\000\014\032\104\033\103\034\101\035\102\036" +
    "\100\001\002\000\006\015\uffeb\022\uffeb\001\002\000\024" +
    "\002\uffb4\003\uffb4\004\uffb4\005\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\020\uffb4\001\002\000\046\002\uffcb\003\uffcb" +
    "\004\uffcb\005\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\037\uffcb\040\uffcb\001\002\000\014\002\uffb9\003" +
    "\uffb9\004\uffb9\005\uffb9\015\uffb9\001\002\000\014\002\uffb8" +
    "\003\uffb8\004\uffb8\005\uffb8\015\uffb8\001\002\000\006\010" +
    "\143\011\144\001\002\000\004\017\157\001\002\000\014" +
    "\003\146\012\043\013\050\014\060\020\031\001\002\000" +
    "\010\030\075\037\151\040\147\001\002\000\004\014\uffcf" +
    "\001\002\000\012\012\uffcc\013\uffcc\014\uffcc\020\uffcc\001" +
    "\002\000\012\012\043\013\050\014\060\020\031\001\002" +
    "\000\012\012\uffcd\013\uffcd\014\uffcd\020\uffcd\001\002\000" +
    "\006\017\153\030\075\001\002\000\012\012\043\013\050" +
    "\014\060\020\031\001\002\000\010\003\155\015\156\030" +
    "\075\001\002\000\004\014\uffce\001\002\000\004\014\uffd0" +
    "\001\002\000\012\012\043\013\050\014\060\020\031\001" +
    "\002\000\006\015\161\030\075\001\002\000\014\002\uffb7" +
    "\003\uffb7\004\uffb7\005\uffb7\015\uffb7\001\002\000\012\002" +
    "\uffef\003\uffef\004\uffef\005\uffef\001\002\000\012\012\043" +
    "\013\050\014\060\020\031\001\002\000\034\002\uffdd\003" +
    "\uffdd\004\uffdd\005\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\030\uffdd\031\uffdd\037\uffdd\040\uffdd\001\002\000" +
    "\006\021\166\030\075\001\002\000\046\002\uffd2\003\uffd2" +
    "\004\uffd2\005\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\037\uffd2\040\uffd2\001\002\000\006\007\120\012" +
    "\063\001\002\000\004\012\023\001\002\000\006\015\uffe8" +
    "\017\uffe8\001\002\000\014\032\104\033\103\034\101\035" +
    "\102\036\100\001\002\000\014\002\ufff0\003\ufff0\004\ufff0" +
    "\005\ufff0\015\175\001\002\000\012\002\ufff1\003\ufff1\004" +
    "\ufff1\005\ufff1\001\002\000\012\002\ufff3\003\ufff3\004\ufff3" +
    "\005\ufff3\001\002\000\004\015\210\001\002\000\004\015" +
    "\200\001\002\000\006\003\201\012\023\001\002\000\012" +
    "\002\uffee\003\uffee\004\uffee\005\uffee\001\002\000\004\015" +
    "\203\001\002\000\004\022\204\001\002\000\012\012\043" +
    "\013\050\014\030\020\031\001\002\000\006\003\206\015" +
    "\207\001\002\000\012\002\ufff2\003\ufff2\004\ufff2\005\ufff2" +
    "\001\002\000\012\002\ufff4\003\ufff4\004\ufff4\005\ufff4\001" +
    "\002\000\010\003\211\012\023\041\212\001\002\000\014" +
    "\002\uffc3\003\uffc3\004\uffc3\005\uffc3\014\uffc3\001\002\000" +
    "\004\017\223\001\002\000\004\017\214\001\002\000\014" +
    "\032\104\033\103\034\101\035\102\036\100\001\002\000" +
    "\004\015\216\001\002\000\004\022\217\001\002\000\012" +
    "\012\043\013\050\014\030\020\031\001\002\000\006\003" +
    "\221\015\222\001\002\000\014\002\uffc6\003\uffc6\004\uffc6" +
    "\005\uffc6\014\uffc6\001\002\000\014\002\uffc7\003\uffc7\004" +
    "\uffc7\005\uffc7\014\uffc7\001\002\000\014\032\104\033\103" +
    "\034\101\035\102\036\100\001\002\000\004\015\225\001" +
    "\002\000\004\022\226\001\002\000\012\012\043\013\050" +
    "\014\030\020\031\001\002\000\006\003\230\015\231\001" +
    "\002\000\014\002\uffc4\003\uffc4\004\uffc4\005\uffc4\014\uffc4" +
    "\001\002\000\014\002\uffc5\003\uffc5\004\uffc5\005\uffc5\014" +
    "\uffc5\001\002\000\004\002\ufffd\001\002\000\006\002\uffff" +
    "\003\234\001\002\000\004\002\ufff9\001\002\000\010\002" +
    "\ufffb\003\236\004\237\001\002\000\004\002\ufffe\001\002" +
    "\000\006\002\000\003\240\001\002\000\004\002\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\234\004\011\005\012\001\001\000\010\003\006" +
    "\004\011\005\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\013" +
    "\004\011\005\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\024\020\023\001\001\000\034\006\172\007" +
    "\032\010\035\011\045\012\037\021\040\022\036\023\046" +
    "\024\031\025\041\026\043\031\044\032\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\033\007\032\010\035\011\045\012" +
    "\037\021\040\022\036\023\046\024\031\025\041\026\043" +
    "\031\044\032\034\001\001\000\002\001\001\000\022\007" +
    "\032\010\035\021\164\022\036\023\046\024\031\025\041" +
    "\026\043\001\001\000\004\027\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\137\032\034\033\140" +
    "\001\001\000\006\007\136\010\035\001\001\000\002\001" +
    "\001\000\006\011\115\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\050\007\032\010\035\011\045" +
    "\012\037\021\040\022\036\023\046\024\031\025\041\026" +
    "\043\031\044\032\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\032\010\035\026" +
    "\113\001\001\000\014\007\032\010\035\024\112\025\041" +
    "\026\043\001\001\000\010\007\032\010\035\026\111\001" +
    "\001\000\014\007\032\010\035\024\110\025\041\026\043" +
    "\001\001\000\010\007\032\010\035\026\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\066\017\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\071\017\065\001\001\000" +
    "\002\001\001\000\022\007\032\010\035\021\073\022\036" +
    "\023\046\024\031\025\041\026\043\001\001\000\002\001" +
    "\001\000\020\007\032\010\035\022\104\023\046\024\031" +
    "\025\041\026\043\001\001\000\004\030\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\032\010\035\023\106\024\031\025\041" +
    "\026\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\122" +
    "\016\125\020\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\127" +
    "\016\125\020\124\001\001\000\002\001\001\000\024\007" +
    "\032\010\035\021\132\022\036\023\046\024\031\025\041" +
    "\026\043\030\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\032" +
    "\010\035\021\144\022\036\023\046\024\031\025\041\026" +
    "\043\001\001\000\004\027\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\032\010\035\021\151\022" +
    "\036\023\046\024\031\025\041\026\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\032\010\035\021" +
    "\153\022\036\023\046\024\031\025\041\026\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\032\010\035\021\157\022\036\023\046\024\031" +
    "\025\041\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\032\010\035\024\163" +
    "\025\041\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\170" +
    "\020\023\001\001\000\002\001\001\000\004\030\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\201\020" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\204\007\032\010\035\011\045\012" +
    "\037\021\040\022\036\023\046\024\031\025\041\026\043" +
    "\031\044\032\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\212\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\217\007\032\010\035\011\045\012\037\021" +
    "\040\022\036\023\046\024\031\025\041\026\043\031\044" +
    "\032\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\226\007\032\010\035\011" +
    "\045\012\037\021\040\022\036\023\046\024\031\025\041" +
    "\026\043\031\044\032\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int errNo = 0;
    public int warnNo = 0;

    //SymbolTable symbolTable;

    public static void main(String[] args) {
        try {
            File file = new File("C:\\Users\\Jelena\\Documents\\faks\\5. semestar\\Programski prevodioci\\TudjmanFranjo\\src\\main\\java\\greska_primer_5");
            FileReader fileReader = new FileReader(file);
            Scanner scanner = new FranjoLexer(fileReader);
            parser parser = new parser(scanner);
            parser.parse();
            parser.checkWarnings();
            if(parser.errNo == 0){
                System.out.println("Analiza zavrsena. U kodu nema gresaka.");
            } else {
                System.out.println("Analiza zavrsena. Broj gresaka: " + parser.errNo);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public void checkWarnings() {
        //SymbolNode current = symbolTable.getVariables();
    }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print(message);
   }

   public int getLine()
   {
      return ((FranjoLexer) getScanner()).getLine();
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= TUDJMAN Blok FRANJO 
            {
              Object RESULT =null;
		
            System.out.println("Program -> TUDJMAN Blok FRANJO");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= FRANJO Blok TUDJMAN 
            {
              Object RESULT =null;
		
            System.out.println("Program -> FRANJO Blok TUDJMAN");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= TUDJMAN Blok error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje 'FRANJO' na kraju programa");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= FRANJO Blok error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje 'TUDJMAN' na kraju programa");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= FRANJO Blok 
            {
              Object RESULT =null;
		
            System.out.println(" GRESKA: Nedostaje 'TUDJMAN' na kraju programa");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= TUDJMAN Blok 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje 'FRANJO' na kraju programa");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= FRANJO TUDJMAN error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje Blok naredbi izmedju Franje i Tudjmana");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= FRANJO Blok TUDJMAN error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Mora da se zavrsi sa 'TUDJMAN'");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= TUDJMAN Blok FRANJO error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Mora da se zavrsi sa 'FRANJO'");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Blok ::= Main 
            {
              Object RESULT =null;
		
            System.out.println("Blok -> Main");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Blok ::= DefineFunction Blok 
            {
              Object RESULT =null;
		
            System.out.println("Blok -> Blok DefineFunction");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Blok ::= DefineFunction 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje MAIN blok");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Main ::= LAB LAB LAB MAIN RAB DefineArgs RAB COMMA FunBody RAB 
            {
              Object RESULT =null;
		
            System.out.println("Main -> <<<main> DefineArgs>, FunBody >");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Main ::= LAB LAB MAIN RAB COMMA FunBody RAB 
            {
              Object RESULT =null;
		
            System.out.println("Main -> <<main>, FunBody >");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Main ::= LAB LAB LAB MAIN RAB DefineArgs RAB COMMA FunBody error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje ZATVORENA UGLASTA ZAGRADA.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Main ::= LAB LAB MAIN RAB COMMA FunBody error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje ZATVORENA UGLASTA ZAGRADA.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Main ::= LAB LAB MAIN RAB COMMA FunBody 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje ZATVORENA UGLASTA ZAGRADA.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Main ::= LAB LAB MAIN RAB DefineArgs RAB COMMA FunBody RAB 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Nedostaje OTVORENA UGLASTA ZAGRADA.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Main ::= LAB LAB LAB MAIN RAB error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Main: Koristi DefineArgs.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DeclareArgs ::= DeclareArg COMMA DeclareArgs 
            {
              Object RESULT =null;
		
            System.out.println("DeclareArgs -> DeclareArg, DeclareArgs");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareArgs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DeclareArgs ::= DeclareArg 
            {
              Object RESULT =null;
		
            System.out.println("DeclareArgs -> DeclareArg");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareArgs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclareArg ::= ID ASSIGN Expression ASSIGN Type 
            {
              Object RESULT =null;
		
            System.out.println("DeclareArg -> ID : Expression : Type");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareArg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DeclareArg ::= ID ASSIGN Expression 
            {
              Object RESULT =null;
		
            System.out.println("DeclareArg -> ID : Expression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareArg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DeclareArg ::= DefineArg 
            {
              Object RESULT =null;
		
            System.out.println("DeclareArg -> DefineArg");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareArg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefineArgs ::= DefineArg COMMA DefineArgs 
            {
              Object RESULT =null;
		
            System.out.println("DefineArgs -> DefineArg, DefineArgs");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineArgs",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefineArgs ::= DefineArg 
            {
              Object RESULT =null;
		
            System.out.println("DefineArgs -> DefineArg");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineArgs",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefineArg ::= ID ASSIGN Type 
            {
              Object RESULT =null;
		
            System.out.println("DefineArg -> ID : Type");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineArg",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CallArgs ::= CallArg COMMA CallArgs 
            {
              Object RESULT =null;
		
            System.out.println("CallArgs -> CallArg, CallArgs");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallArgs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CallArgs ::= CallArg 
            {
              Object RESULT =null;
		
            System.out.println("CallArgs -> CallArg");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallArgs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CallArg ::= ID ASSIGN Expression ASSIGN Type 
            {
              Object RESULT =null;
		
            System.out.println("CallArg -> ID : Expression : Type");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallArg",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CallArg ::= ID 
            {
              Object RESULT =null;
		
            System.out.println("CallArg -> ID");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallArg",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;
		
            System.out.println("Expression -> Expression || AndExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= AndExpression 
            {
              Object RESULT =null;
		
            System.out.println("Expression -> AndExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT =null;
		
            System.out.println("AndExpression -> AndExpression && RelExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AndExpression ::= RelExpression 
            {
              Object RESULT =null;
		
            System.out.println("AndExpression -> RelExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT =null;
		
            System.out.println("RelExpression -> ArExpression RelOp ArExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelExpression ::= ArExpression 
            {
              Object RESULT =null;
		
            System.out.println("RelExpression -> ArExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ArExpression ::= Term PLUS ArExpression 
            {
              Object RESULT =null;
		
            System.out.println("ArExpression ->  Term + ArExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ArExpression ::= Term MINUS ArExpression 
            {
              Object RESULT =null;
		
            System.out.println("ArExpression ->  Term - ArExpression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ArExpression ::= Term 
            {
              Object RESULT =null;
		
            System.out.println("ArExpression ->  Term");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
            System.out.println("Term -> Term * Factor");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
            System.out.println("Term -> Term / Factor");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term ::= Term MOD Factor 
            {
              Object RESULT =null;
		
            System.out.println("Term -> Term % Factor");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Term ::= Factor 
            {
              Object RESULT =null;
		
            System.out.println("Term -> Factor");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Factor ::= ID 
            {
              Object RESULT =null;
		
            System.out.println("Factor -> ID");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Factor ::= CONST 
            {
              Object RESULT =null;
		
            System.out.println("Factor -> CONST");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;
		
            System.out.println("Factor -> ( Expression )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Factor ::= CallFuns 
            {
              Object RESULT =null;
		
            System.out.println("Factor -> CallFun");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Case ::= LAB CASE Expression RelOp Expression RETURN_SIGN Expression RAB 
            {
              Object RESULT =null;
		
            System.out.println("Case -> < case Expression RelOp Expression -> Expression >");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Case ::= LAB CASE error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Trazi se Expression!");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Case ::= LAB CASE Expression RelOp Expression RETURN_SIGN Expression error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Fali '>'!");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= EQUAL 
            {
              Object RESULT =null;
		
            System.out.println("RelOp -> ==");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelOp ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
            System.out.println("RelOp -> !=");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CallFuns ::= CallFun CallFuns 
            {
              Object RESULT =null;
		
            System.out.println("CallFuns -> CallFun CallFuns");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFuns",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFuns ::= CallFun 
            {
              Object RESULT =null;
		
            System.out.println("CallFuns -> CallFun");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFuns",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CallFun ::= LAB LAB ID RAB CallArgs RAB 
            {
              Object RESULT =null;
		
            System.out.println("CallFun -> <<ID> CallArgs>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CallFun ::= LAB ID RAB 
            {
              Object RESULT =null;
		
            System.out.println("CallFun -> <ID>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DefineFunction ::= LAB LAB LAB ID RAB DefineArgs RETURN_SIGN Type RAB COMMA FunBody RAB 
            {
              Object RESULT =null;
		
            System.out.println("DefineFunction -> <<<ID> DefineArgs -> Type>, FunBody>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DefineFunction ::= LAB LAB LAB ID RAB DefineArgs RETURN_SIGN Type RAB COMMA FunBody error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Fali zatvorena zagrada");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DefineFunction ::= LAB LAB LAB ID RAB UNDERSCORE RETURN_SIGN Type RAB COMMA FunBody RAB 
            {
              Object RESULT =null;
		
            System.out.println("DefineFunction -> <<<ID> _ -> Type>, FunBody>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DefineFunction ::= LAB LAB LAB ID RAB UNDERSCORE RETURN_SIGN Type RAB COMMA FunBody error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Fali zatvorena zagrada");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DefineFunction ::= LAB LAB LAB ID RAB error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Koristi DefineArgss.");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefineFunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= CHAR 
            {
              Object RESULT =null;
		
            System.out.println("Type -> char");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= INT 
            {
              Object RESULT =null;
		
            System.out.println("Type -> int");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Type ::= BOOL 
            {
              Object RESULT =null;
		
            System.out.println("Type -> bool");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= FLOAT 
            {
              Object RESULT =null;
		
            System.out.println("Type -> float");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type ::= STRING 
            {
              Object RESULT =null;
		
            System.out.println("Type -> string");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunBody ::= Expression 
            {
              Object RESULT =null;
		
            System.out.println("FunBody -> Expression");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunBody ::= Cases 
            {
              Object RESULT =null;
		
            System.out.println("FunBody -> Cases");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunBody ::= DeclareList FunBody 
            {
              Object RESULT =null;
		
            System.out.println("FunBody -> DeclareList FunBody");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FunBody ::= DeclareList 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Fali telo funkcije");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Cases ::= Case Cases 
            {
              Object RESULT =null;
		
            System.out.println("Cases -> Cases Case");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cases",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Cases ::= Case Default 
            {
              Object RESULT =null;
		
            System.out.println("Cases -> Case Default");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cases",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Default ::= LAB DEFAULT RETURN_SIGN Expression RAB 
            {
              Object RESULT =null;
		
            System.out.println("Default -> <default -> Expression>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Default",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DeclareList ::= DeclareStmt DeclareList 
            {
              Object RESULT =null;
		
            System.out.println("DeclareList -> DeclareStmt DeclareList");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DeclareList ::= DeclareStmt 
            {
              Object RESULT =null;
		
            System.out.println("DeclareList -> DeclareStmt");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DeclareStmt ::= LAB LAB DECLARE RAB DeclareArgs RAB 
            {
              Object RESULT =null;
		
            System.out.println("DeclareStmt -> <<declare> DeclareArgs>");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareStmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DeclareStmt ::= LAB LAB DECLARE error 
            {
              Object RESULT =null;
		
            System.out.println("GRESKA: Fali '>'");
            parser.errNo++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclareStmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
